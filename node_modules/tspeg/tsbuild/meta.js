"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntaxErr = exports.Parser = exports.RANGESPEC = exports.ATOM_3 = exports.POSTOP = exports.RULE = exports.ASTKinds = void 0;
exports.parse = parse;
var ASTKinds;
(function (ASTKinds) {
    ASTKinds["GRAM"] = "GRAM";
    ASTKinds["HDR"] = "HDR";
    ASTKinds["RULEDEF"] = "RULEDEF";
    ASTKinds["RULE"] = "RULE";
    ASTKinds["RULE_$0"] = "RULE_$0";
    ASTKinds["ALT"] = "ALT";
    ASTKinds["MATCHSPEC"] = "MATCHSPEC";
    ASTKinds["MATCHSPEC_$0"] = "MATCHSPEC_$0";
    ASTKinds["MATCH_1"] = "MATCH_1";
    ASTKinds["MATCH_2"] = "MATCH_2";
    ASTKinds["SPECIAL"] = "SPECIAL";
    ASTKinds["POSTOP"] = "POSTOP";
    ASTKinds["POSTOP_$0_1"] = "POSTOP_$0_1";
    ASTKinds["POSTOP_$0_2"] = "POSTOP_$0_2";
    ASTKinds["PREOP"] = "PREOP";
    ASTKinds["ATOM_1"] = "ATOM_1";
    ASTKinds["ATOM_2"] = "ATOM_2";
    ASTKinds["ATOM_3"] = "ATOM_3";
    ASTKinds["ATOM_4"] = "ATOM_4";
    ASTKinds["EOF"] = "EOF";
    ASTKinds["ATTR"] = "ATTR";
    ASTKinds["NAME"] = "NAME";
    ASTKinds["STRLIT"] = "STRLIT";
    ASTKinds["RANGESPEC"] = "RANGESPEC";
    ASTKinds["RANGESPEC_$0"] = "RANGESPEC_$0";
    ASTKinds["_"] = "_";
    ASTKinds["TS_TYPE"] = "TS_TYPE";
    ASTKinds["TS_TYPE_$0_1"] = "TS_TYPE_$0_1";
    ASTKinds["TS_TYPE_$0_2"] = "TS_TYPE_$0_2";
    ASTKinds["TS_TYPE_$0_3"] = "TS_TYPE_$0_3";
    ASTKinds["TS_EXPR"] = "TS_EXPR";
    ASTKinds["TS_EXPR_$0"] = "TS_EXPR_$0";
    ASTKinds["TS_PRIM"] = "TS_PRIM";
    ASTKinds["TS_PRIM_$0_1"] = "TS_PRIM_$0_1";
    ASTKinds["TS_PRIM_$0_2"] = "TS_PRIM_$0_2";
    ASTKinds["TS_PRIM_$0_3"] = "TS_PRIM_$0_3";
    ASTKinds["TS_PRIM_$0_4"] = "TS_PRIM_$0_4";
    ASTKinds["TS_PRIM_$0_5"] = "TS_PRIM_$0_5";
    ASTKinds["TS_PRIM_$0_6"] = "TS_PRIM_$0_6";
    ASTKinds["TS_PRIM_$0_$0"] = "TS_PRIM_$0_$0";
    ASTKinds["TS_PRIM_$0_$0_$0"] = "TS_PRIM_$0_$0_$0";
    ASTKinds["TS_PRIM_$0_$1"] = "TS_PRIM_$0_$1";
    ASTKinds["TS_PRIM_$0_$1_$0"] = "TS_PRIM_$0_$1_$0";
    ASTKinds["TS_TYPE_REF"] = "TS_TYPE_REF";
    ASTKinds["TS_TYPE_REF_$0"] = "TS_TYPE_REF_$0";
    ASTKinds["TS_TYPE_REF_$1"] = "TS_TYPE_REF_$1";
    ASTKinds["TS_TYPE_QUERY"] = "TS_TYPE_QUERY";
    ASTKinds["TS_TYPE_QUERY_$0"] = "TS_TYPE_QUERY_$0";
    ASTKinds["TS_FUNCTION"] = "TS_FUNCTION";
    ASTKinds["TS_CONSTRUCTOR"] = "TS_CONSTRUCTOR";
    ASTKinds["TS_GENERIC_PARAMS"] = "TS_GENERIC_PARAMS";
    ASTKinds["TS_GENERIC_PARAMS_$0"] = "TS_GENERIC_PARAMS_$0";
    ASTKinds["TS_GENERIC_PARAMS_$0_$0"] = "TS_GENERIC_PARAMS_$0_$0";
    ASTKinds["TS_GENERIC_PARAM"] = "TS_GENERIC_PARAM";
    ASTKinds["TS_GENERIC_PARAM_$0"] = "TS_GENERIC_PARAM_$0";
    ASTKinds["TS_GENERIC_ARGS"] = "TS_GENERIC_ARGS";
    ASTKinds["TS_GENERIC_ARGS_$0"] = "TS_GENERIC_ARGS_$0";
    ASTKinds["TS_GENERIC_ARGS_$0_$0"] = "TS_GENERIC_ARGS_$0_$0";
    ASTKinds["TS_PARAM_LIST_1"] = "TS_PARAM_LIST_1";
    ASTKinds["TS_PARAM_LIST_2"] = "TS_PARAM_LIST_2";
    ASTKinds["TS_PARAM_LIST_3"] = "TS_PARAM_LIST_3";
    ASTKinds["TS_PARAM_LIST_$0"] = "TS_PARAM_LIST_$0";
    ASTKinds["TS_PARAM_LIST_$1"] = "TS_PARAM_LIST_$1";
    ASTKinds["TS_PARAM_LIST_$2"] = "TS_PARAM_LIST_$2";
    ASTKinds["TS_REQUIRED_PARAMS"] = "TS_REQUIRED_PARAMS";
    ASTKinds["TS_REQUIRED_PARAMS_$0"] = "TS_REQUIRED_PARAMS_$0";
    ASTKinds["TS_REQUIRED_PARAM"] = "TS_REQUIRED_PARAM";
    ASTKinds["TS_OPTIONAL_PARAMS"] = "TS_OPTIONAL_PARAMS";
    ASTKinds["TS_OPTIONAL_PARAMS_$0"] = "TS_OPTIONAL_PARAMS_$0";
    ASTKinds["TS_OPTIONAL_PARAM"] = "TS_OPTIONAL_PARAM";
    ASTKinds["TS_REST_PARAM"] = "TS_REST_PARAM";
    ASTKinds["TS_TYPE_MEMBER_1"] = "TS_TYPE_MEMBER_1";
    ASTKinds["TS_TYPE_MEMBER_2"] = "TS_TYPE_MEMBER_2";
    ASTKinds["TS_TYPE_MEMBER_3"] = "TS_TYPE_MEMBER_3";
    ASTKinds["TS_TYPE_MEMBER_4"] = "TS_TYPE_MEMBER_4";
    ASTKinds["TS_TYPE_MEMBER_5"] = "TS_TYPE_MEMBER_5";
    ASTKinds["TS_PROPERTY_NAME_1"] = "TS_PROPERTY_NAME_1";
    ASTKinds["TS_PROPERTY_NAME_2"] = "TS_PROPERTY_NAME_2";
    ASTKinds["TS_PROPERTY_NAME_3"] = "TS_PROPERTY_NAME_3";
    ASTKinds["TS_STRING_1"] = "TS_STRING_1";
    ASTKinds["TS_STRING_2"] = "TS_STRING_2";
    ASTKinds["TS_STRING_3"] = "TS_STRING_3";
    ASTKinds["TS_NUM"] = "TS_NUM";
    ASTKinds["CODE_SECTION"] = "CODE_SECTION";
    ASTKinds["CODE_REC"] = "CODE_REC";
    ASTKinds["CODE_REC_$0_1"] = "CODE_REC_$0_1";
    ASTKinds["CODE_REC_$0_2"] = "CODE_REC_$0_2";
    ASTKinds["CODE_REC_$0_3"] = "CODE_REC_$0_3";
    ASTKinds["$EOF"] = "$EOF";
})(ASTKinds || (exports.ASTKinds = ASTKinds = {}));
class RULE {
    constructor(head, tail) {
        this.kind = ASTKinds.RULE;
        this.head = head;
        this.tail = tail;
        this.list = (() => {
            return [this.head, ...this.tail.map((x) => x.alt)];
        })();
    }
}
exports.RULE = RULE;
class POSTOP {
    constructor(pre, op) {
        this.kind = ASTKinds.POSTOP;
        this.pre = pre;
        this.op = op;
        this.optional = (() => {
            var _a;
            return ((_a = this.op) === null || _a === void 0 ? void 0 : _a.kind) === ASTKinds.POSTOP_$0_1 && this.op.op === '?';
        })();
    }
}
exports.POSTOP = POSTOP;
class ATOM_3 {
    constructor(sub) {
        this.kind = ASTKinds.ATOM_3;
        this.sub = sub;
        this.name = (() => {
            return null;
        })();
    }
}
exports.ATOM_3 = ATOM_3;
class RANGESPEC {
    constructor(a, u) {
        this.kind = ASTKinds.RANGESPEC;
        this.a = a;
        this.u = u;
        this.a_val = (() => {
            return parseInt(this.a);
        })();
        this.b_val = (() => {
            return this.u !== null && this.u.b !== null ? parseInt(this.u.b) : null;
        })();
        this.lb = (() => {
            return this.a_val;
        })();
        this.ub = (() => {
            var _a;
            return (_a = this.b_val) !== null && _a !== void 0 ? _a : (this.u !== null ? -1 : this.lb);
        })();
    }
}
exports.RANGESPEC = RANGESPEC;
class Parser {
    constructor(input) {
        this.negating = false;
        this.memoSafe = true;
        this.pos = { overallPos: 0, line: 1, offset: 0 };
        this.input = input;
    }
    reset(pos) {
        this.pos = pos;
    }
    finished() {
        return this.pos.overallPos === this.input.length;
    }
    clearMemos() {
    }
    matchGRAM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$header;
            let $scope$rules;
            let $$res = null;
            if (true
                && (($scope$header = this.matchHDR($$dpth + 1, $$cr)) || true)
                && ($scope$rules = this.loopPlus(() => this.matchRULEDEF($$dpth + 1, $$cr))) !== null
                && this.match$EOF($$cr) !== null) {
                $$res = { kind: ASTKinds.GRAM, header: $scope$header, rules: $scope$rules };
            }
            return $$res;
        });
    }
    matchHDR($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$content;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:---)`, "", $$dpth + 1, $$cr) !== null
                && ($scope$content = this.regexAccept(String.raw `(?:((?!---)(.|\r\n|\n))*)`, "", $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:---)`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.HDR, content: $scope$content };
            }
            return $$res;
        });
    }
    matchRULEDEF($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$namestart;
            let $scope$name;
            let $scope$nameend;
            let $scope$rule;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$namestart = this.mark()) !== null
                && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                && ($scope$nameend = this.mark()) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::=)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$rule = this.matchRULE($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.RULEDEF, namestart: $scope$namestart, name: $scope$name, nameend: $scope$nameend, rule: $scope$rule };
            }
            return $$res;
        });
    }
    matchRULE($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$head;
            let $scope$tail;
            let $$res = null;
            if (true
                && ($scope$head = this.matchALT($$dpth + 1, $$cr)) !== null
                && ($scope$tail = this.loop(() => this.matchRULE_$0($$dpth + 1, $$cr), 0, -1)) !== null) {
                $$res = new RULE($scope$head, $scope$tail);
            }
            return $$res;
        });
    }
    matchRULE_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$alt;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\|)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$alt = this.matchALT($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.RULE_$0, alt: $scope$alt };
            }
            return $$res;
        });
    }
    matchALT($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$matches;
            let $scope$attrs;
            let $$res = null;
            if (true
                && ($scope$matches = this.loopPlus(() => this.matchMATCHSPEC($$dpth + 1, $$cr))) !== null
                && ($scope$attrs = this.loop(() => this.matchATTR($$dpth + 1, $$cr), 0, -1)) !== null) {
                $$res = { kind: ASTKinds.ALT, matches: $scope$matches, attrs: $scope$attrs };
            }
            return $$res;
        });
    }
    matchMATCHSPEC($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$named;
            let $scope$rule;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && (($scope$named = this.matchMATCHSPEC_$0($$dpth + 1, $$cr)) || true)
                && ($scope$rule = this.matchMATCH($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.MATCHSPEC, named: $scope$named, rule: $scope$rule };
            }
            return $$res;
        });
    }
    matchMATCHSPEC_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$name;
            let $$res = null;
            if (true
                && ($scope$start = this.mark()) !== null
                && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:=)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.MATCHSPEC_$0, start: $scope$start, name: $scope$name };
            }
            return $$res;
        });
    }
    matchMATCH($$dpth, $$cr) {
        return this.choice([
            () => this.matchMATCH_1($$dpth + 1, $$cr),
            () => this.matchMATCH_2($$dpth + 1, $$cr),
        ]);
    }
    matchMATCH_1($$dpth, $$cr) {
        return this.matchSPECIAL($$dpth + 1, $$cr);
    }
    matchMATCH_2($$dpth, $$cr) {
        return this.matchPOSTOP($$dpth + 1, $$cr);
    }
    matchSPECIAL($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$op;
            let $$res = null;
            if (true
                && ($scope$op = this.regexAccept(String.raw `(?:@)`, "", $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.SPECIAL, op: $scope$op };
            }
            return $$res;
        });
    }
    matchPOSTOP($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$pre;
            let $scope$op;
            let $$res = null;
            if (true
                && ($scope$pre = this.matchPREOP($$dpth + 1, $$cr)) !== null
                && (($scope$op = this.matchPOSTOP_$0($$dpth + 1, $$cr)) || true)) {
                $$res = new POSTOP($scope$pre, $scope$op);
            }
            return $$res;
        });
    }
    matchPOSTOP_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchPOSTOP_$0_1($$dpth + 1, $$cr),
            () => this.matchPOSTOP_$0_2($$dpth + 1, $$cr),
        ]);
    }
    matchPOSTOP_$0_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$op;
            let $$res = null;
            if (true
                && ($scope$op = this.regexAccept(String.raw `(?:\+|\*|\?)`, "", $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.POSTOP_$0_1, op: $scope$op };
            }
            return $$res;
        });
    }
    matchPOSTOP_$0_2($$dpth, $$cr) {
        return this.matchRANGESPEC($$dpth + 1, $$cr);
    }
    matchPREOP($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$op;
            let $scope$at;
            let $$res = null;
            if (true
                && ($scope$start = this.mark()) !== null
                && (($scope$op = this.regexAccept(String.raw `(?:\&|!)`, "", $$dpth + 1, $$cr)) || true)
                && ($scope$at = this.matchATOM($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.PREOP, start: $scope$start, op: $scope$op, at: $scope$at };
            }
            return $$res;
        });
    }
    matchATOM($$dpth, $$cr) {
        return this.choice([
            () => this.matchATOM_1($$dpth + 1, $$cr),
            () => this.matchATOM_2($$dpth + 1, $$cr),
            () => this.matchATOM_3($$dpth + 1, $$cr),
            () => this.matchATOM_4($$dpth + 1, $$cr),
        ]);
    }
    matchATOM_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$name;
            let $$res = null;
            if (true
                && ($scope$start = this.mark()) !== null
                && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                && this.negate(() => this.regexAccept(String.raw `(?:\s*:=)`, "", $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.ATOM_1, start: $scope$start, name: $scope$name };
            }
            return $$res;
        });
    }
    matchATOM_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$match;
            let $$res = null;
            if (true
                && ($scope$match = this.matchSTRLIT($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.ATOM_2, match: $scope$match };
            }
            return $$res;
        });
    }
    matchATOM_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$sub;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:{)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$sub = this.matchRULE($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:})`, "", $$dpth + 1, $$cr) !== null) {
                $$res = new ATOM_3($scope$sub);
            }
            return $$res;
        });
    }
    matchATOM_4($$dpth, $$cr) {
        return this.matchEOF($$dpth + 1, $$cr);
    }
    matchEOF($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$symb;
            let $$res = null;
            if (true
                && ($scope$symb = this.regexAccept(String.raw `(?:\$)`, "", $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.EOF, symb: $scope$symb };
            }
            return $$res;
        });
    }
    matchATTR($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$name;
            let $scope$type;
            let $scope$code;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\.)`, "", $$dpth + 1, $$cr) !== null
                && ($scope$name = this.matchNAME($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:=)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$type = this.matchTS_TYPE($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$code = this.matchCODE_SECTION($$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.ATTR, name: $scope$name, type: $scope$type, code: $scope$code };
            }
            return $$res;
        });
    }
    matchNAME($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[a-zA-Z_][a-zA-Z0-9_]*)`, "", $$dpth + 1, $$cr);
    }
    matchSTRLIT($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$val;
            let $scope$mods;
            let $$res = null;
            if (true
                && ($scope$start = this.mark()) !== null
                && this.regexAccept(String.raw `(?:\')`, "", $$dpth + 1, $$cr) !== null
                && ($scope$val = this.regexAccept(String.raw `(?:([^\'\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\')`, "", $$dpth + 1, $$cr) !== null
                && ($scope$mods = this.regexAccept(String.raw `(?:[mius]*)`, "", $$dpth + 1, $$cr)) !== null) {
                $$res = { kind: ASTKinds.STRLIT, start: $scope$start, val: $scope$val, mods: $scope$mods };
            }
            return $$res;
        });
    }
    matchRANGESPEC($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$a;
            let $scope$u;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\[\s*)`, "", $$dpth + 1, $$cr) !== null
                && ($scope$a = this.regexAccept(String.raw `(?:[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                && (($scope$u = this.matchRANGESPEC_$0($$dpth + 1, $$cr)) || true)
                && this.regexAccept(String.raw `(?:\s*\])`, "", $$dpth + 1, $$cr) !== null) {
                $$res = new RANGESPEC($scope$a, $scope$u);
            }
            return $$res;
        });
    }
    matchRANGESPEC_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$b;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:,\s*)`, "", $$dpth + 1, $$cr) !== null
                && (($scope$b = this.regexAccept(String.raw `(?:[0-9]+)`, "", $$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.RANGESPEC_$0, b: $scope$b };
            }
            return $$res;
        });
    }
    match_($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:(?:\s|(?:\/\/.*(?:\r\n|\n|$)))*)`, "", $$dpth + 1, $$cr);
    }
    matchTS_TYPE($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$end;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && ($scope$start = this.mark()) !== null
                && this.matchTS_TYPE_$0($$dpth + 1, $$cr) !== null
                && ($scope$end = this.mark()) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE, start: $scope$start, end: $scope$end };
            }
            return $$res;
        });
    }
    matchTS_TYPE_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_TYPE_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchTS_TYPE_$0_1($$dpth, $$cr) {
        return this.matchTS_FUNCTION($$dpth + 1, $$cr);
    }
    matchTS_TYPE_$0_2($$dpth, $$cr) {
        return this.matchTS_CONSTRUCTOR($$dpth + 1, $$cr);
    }
    matchTS_TYPE_$0_3($$dpth, $$cr) {
        return this.matchTS_EXPR($$dpth + 1, $$cr);
    }
    matchTS_EXPR($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_PRIM($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_EXPR_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_EXPR, };
            }
            return $$res;
        });
    }
    matchTS_EXPR_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:[&|])`, "", $$dpth + 1, $$cr) !== null
                && this.matchTS_PRIM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_EXPR_$0, };
            }
            return $$res;
        });
    }
    matchTS_PRIM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.matchTS_PRIM_$0($$dpth + 1, $$cr) !== null
                && this.loop(() => this.regexAccept(String.raw `(?:\[\])`, "", $$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_PRIM_$0_1($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_2($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_3($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_4($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_5($$dpth + 1, $$cr),
            () => this.matchTS_PRIM_$0_6($$dpth + 1, $$cr),
        ]);
    }
    matchTS_PRIM_$0_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\()`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\))`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_1, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_2($$dpth, $$cr) {
        return this.matchTS_TYPE_QUERY($$dpth + 1, $$cr);
    }
    matchTS_PRIM_$0_3($$dpth, $$cr) {
        return this.matchTS_TYPE_REF($$dpth + 1, $$cr);
    }
    matchTS_PRIM_$0_4($$dpth, $$cr) {
        return this.matchTS_PROPERTY_NAME($$dpth + 1, $$cr);
    }
    matchTS_PRIM_$0_5($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\{)`, "", $$dpth + 1, $$cr) !== null
                && ((this.matchTS_PRIM_$0_$0($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\})`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_5, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_6($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\[)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PRIM_$0_$1($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\])`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_6, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE_MEMBER($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_PRIM_$0_$0_$0($$dpth + 1, $$cr), 0, -1) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:[;,]?)`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_$0, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_$0_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:[;,])`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE_MEMBER($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_$0_$0, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_PRIM_$0_$1_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_$1, };
            }
            return $$res;
        });
    }
    matchTS_PRIM_$0_$1_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PRIM_$0_$1_$0, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_REF($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_TYPE_REF_$0($$dpth + 1, $$cr), 0, -1) !== null
                && ((this.matchTS_TYPE_REF_$1($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.TS_TYPE_REF, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_REF_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\.)`, "", $$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_REF_$0, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_REF_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_GENERIC_ARGS($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_REF_$1, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_QUERY($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:typeof)`, "", $$dpth + 1, $$cr) !== null
                && this.noConsume(() => this.match_($$dpth + 1, $$cr)) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_TYPE_QUERY_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_QUERY, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_QUERY_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\.)`, "", $$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_QUERY_$0, };
            }
            return $$res;
        });
    }
    matchTS_FUNCTION($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\()`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\))`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:=>)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_FUNCTION, };
            }
            return $$res;
        });
    }
    matchTS_CONSTRUCTOR($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:new)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_FUNCTION($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_CONSTRUCTOR, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_PARAMS($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:<)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_PARAMS_$0($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:>)`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_PARAMS, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_PARAMS_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_GENERIC_PARAMS_$0_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_PARAMS_$0, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_PARAMS_$0_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_GENERIC_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_PARAMS_$0_$0, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_PARAM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_PARAM_$0($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.TS_GENERIC_PARAM, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_PARAM_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:extends)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_PARAM_$0, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_ARGS($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:<)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_ARGS_$0($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:>)`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_ARGS, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_ARGS_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_GENERIC_ARGS_$0_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_ARGS_$0, };
            }
            return $$res;
        });
    }
    matchTS_GENERIC_ARGS_$0_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_GENERIC_ARGS_$0_$0, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_PARAM_LIST_1($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_2($$dpth + 1, $$cr),
            () => this.matchTS_PARAM_LIST_3($$dpth + 1, $$cr),
        ]);
    }
    matchTS_PARAM_LIST_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REQUIRED_PARAMS($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST_$0($$dpth + 1, $$cr)) || true)
                && ((this.matchTS_PARAM_LIST_$1($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_1, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST_$2($$dpth + 1, $$cr)) || true)) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_2, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_3, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_OPTIONAL_PARAMS($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_$0, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST_$1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_$1, };
            }
            return $$res;
        });
    }
    matchTS_PARAM_LIST_$2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REST_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_PARAM_LIST_$2, };
            }
            return $$res;
        });
    }
    matchTS_REQUIRED_PARAMS($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_REQUIRED_PARAMS_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_REQUIRED_PARAMS, };
            }
            return $$res;
        });
    }
    matchTS_REQUIRED_PARAMS_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_REQUIRED_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_REQUIRED_PARAMS_$0, };
            }
            return $$res;
        });
    }
    matchTS_REQUIRED_PARAM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_REQUIRED_PARAM, };
            }
            return $$res;
        });
    }
    matchTS_OPTIONAL_PARAMS($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.loop(() => this.matchTS_OPTIONAL_PARAMS_$0($$dpth + 1, $$cr), 0, -1) !== null) {
                $$res = { kind: ASTKinds.TS_OPTIONAL_PARAMS, };
            }
            return $$res;
        });
    }
    matchTS_OPTIONAL_PARAMS_$0($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:,)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_OPTIONAL_PARAM($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_OPTIONAL_PARAMS_$0, };
            }
            return $$res;
        });
    }
    matchTS_OPTIONAL_PARAM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\?)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_OPTIONAL_PARAM, };
            }
            return $$res;
        });
    }
    matchTS_REST_PARAM($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\.\.\.)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_REST_PARAM, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_MEMBER($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_TYPE_MEMBER_1($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_2($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_3($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_4($$dpth + 1, $$cr),
            () => this.matchTS_TYPE_MEMBER_5($$dpth + 1, $$cr),
        ]);
    }
    matchTS_TYPE_MEMBER_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.matchTS_PROPERTY_NAME($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\??)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_MEMBER_1, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_MEMBER_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\()`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\))`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_MEMBER_2, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_MEMBER_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:new)`, "", $$dpth + 1, $$cr) !== null
                && this.noConsume(() => this.match_($$dpth + 1, $$cr)) !== null
                && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\()`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\))`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_MEMBER_3, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_MEMBER_4($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\[)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\])`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_MEMBER_4, };
            }
            return $$res;
        });
    }
    matchTS_TYPE_MEMBER_5($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchNAME($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\??)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_GENERIC_PARAMS($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\()`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && ((this.matchTS_PARAM_LIST($$dpth + 1, $$cr)) || true)
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\))`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?::)`, "", $$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.matchTS_TYPE($$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_TYPE_MEMBER_5, };
            }
            return $$res;
        });
    }
    matchTS_PROPERTY_NAME($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_PROPERTY_NAME_1($$dpth + 1, $$cr),
            () => this.matchTS_PROPERTY_NAME_2($$dpth + 1, $$cr),
            () => this.matchTS_PROPERTY_NAME_3($$dpth + 1, $$cr),
        ]);
    }
    matchTS_PROPERTY_NAME_1($$dpth, $$cr) {
        return this.matchNAME($$dpth + 1, $$cr);
    }
    matchTS_PROPERTY_NAME_2($$dpth, $$cr) {
        return this.matchTS_STRING($$dpth + 1, $$cr);
    }
    matchTS_PROPERTY_NAME_3($$dpth, $$cr) {
        return this.matchTS_NUM($$dpth + 1, $$cr);
    }
    matchTS_STRING($$dpth, $$cr) {
        return this.choice([
            () => this.matchTS_STRING_1($$dpth + 1, $$cr),
            () => this.matchTS_STRING_2($$dpth + 1, $$cr),
            () => this.matchTS_STRING_3($$dpth + 1, $$cr),
        ]);
    }
    matchTS_STRING_1($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$val;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:")`, "", $$dpth + 1, $$cr) !== null
                && ($scope$val = this.regexAccept(String.raw `(?:([^"\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:")`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_STRING_1, val: $scope$val };
            }
            return $$res;
        });
    }
    matchTS_STRING_2($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$val;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\')`, "", $$dpth + 1, $$cr) !== null
                && ($scope$val = this.regexAccept(String.raw `(?:([^\'\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\')`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_STRING_2, val: $scope$val };
            }
            return $$res;
        });
    }
    matchTS_STRING_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$val;
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\`)`, "", $$dpth + 1, $$cr) !== null
                && ($scope$val = this.regexAccept(String.raw `(?:([^\`\\]|(\\.))*)`, "", $$dpth + 1, $$cr)) !== null
                && this.regexAccept(String.raw `(?:\`)`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.TS_STRING_3, val: $scope$val };
            }
            return $$res;
        });
    }
    matchTS_NUM($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:-?[0-9]+(?:\.[0-9]+)?)`, "", $$dpth + 1, $$cr);
    }
    matchCODE_SECTION($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $scope$start;
            let $scope$end;
            let $$res = null;
            if (true
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\{)`, "", $$dpth + 1, $$cr) !== null
                && ($scope$start = this.mark()) !== null
                && ((this.matchCODE_REC($$dpth + 1, $$cr)) || true)
                && ($scope$end = this.mark()) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\})`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.CODE_SECTION, start: $scope$start, end: $scope$end };
            }
            return $$res;
        });
    }
    matchCODE_REC($$dpth, $$cr) {
        return this.loop(() => this.matchCODE_REC_$0($$dpth + 1, $$cr), 0, -1);
    }
    matchCODE_REC_$0($$dpth, $$cr) {
        return this.choice([
            () => this.matchCODE_REC_$0_1($$dpth + 1, $$cr),
            () => this.matchCODE_REC_$0_2($$dpth + 1, $$cr),
            () => this.matchCODE_REC_$0_3($$dpth + 1, $$cr),
        ]);
    }
    matchCODE_REC_$0_1($$dpth, $$cr) {
        return this.regexAccept(String.raw `(?:[^{}\'"\`]+)`, "", $$dpth + 1, $$cr);
    }
    matchCODE_REC_$0_2($$dpth, $$cr) {
        return this.matchTS_STRING($$dpth + 1, $$cr);
    }
    matchCODE_REC_$0_3($$dpth, $$cr) {
        return this.run($$dpth, () => {
            let $$res = null;
            if (true
                && this.regexAccept(String.raw `(?:\{)`, "", $$dpth + 1, $$cr) !== null
                && this.matchCODE_REC($$dpth + 1, $$cr) !== null
                && this.match_($$dpth + 1, $$cr) !== null
                && this.regexAccept(String.raw `(?:\})`, "", $$dpth + 1, $$cr) !== null) {
                $$res = { kind: ASTKinds.CODE_REC_$0_3, };
            }
            return $$res;
        });
    }
    test() {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    parse() {
        const mrk = this.mark();
        const res = this.matchGRAM(0);
        if (res)
            return { ast: res, errs: [] };
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchGRAM(0, rec);
        const err = rec.getErr();
        return { ast: res, errs: err !== null ? [err] : [] };
    }
    mark() {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    loopPlus(func) {
        return this.loop(func, 1, -1);
    }
    loop(func, lb, ub) {
        const mrk = this.mark();
        const res = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    run($$dpth, fn) {
        const mrk = this.mark();
        const res = fn();
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    choice(fns) {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    regexAccept(match, mods, dpth, cr) {
        return this.run(dpth, () => {
            const reg = new RegExp(match, "y" + mods);
            const mrk = this.mark();
            reg.lastIndex = mrk.overallPos;
            const res = this.tryConsume(reg);
            if (cr) {
                cr.record(mrk, res, {
                    kind: "RegexMatch",
                    // We substring from 3 to len - 1 to strip off the
                    // non-capture group syntax added as a WebKit workaround
                    literal: match.substring(3, match.length - 1),
                    negated: this.negating,
                });
            }
            return res;
        });
    }
    tryConsume(reg) {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    noConsume(fn) {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    negate(fn) {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    memoise(rule, memo) {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if (this.memoSafe && $scope$memoRes !== undefined) {
            this.reset($scope$memoRes[1]);
            return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if (this.memoSafe)
            memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    match$EOF(et) {
        const res = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if (et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
exports.Parser = Parser;
function parse(s) {
    const p = new Parser(s);
    return p.parse();
}
class SyntaxErr {
    constructor(pos, expmatches) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    toString() {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ' : ''}'${x.literal}'`)}`;
    }
}
exports.SyntaxErr = SyntaxErr;
class ErrorTracker {
    constructor() {
        this.mxpos = { overallPos: -1, line: -1, offset: -1 };
        this.regexset = new Set();
        this.pmatches = [];
    }
    record(pos, result, att) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear();
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if (att.kind === "RegexMatch") {
                if (!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            }
            else {
                this.pmatches.push(att);
            }
        }
    }
    getErr() {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}
