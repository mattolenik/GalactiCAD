#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const yargs = __importStar(require("yargs"));
const gen_1 = require("./gen");
const checks_1 = require("./checks");
// TODO format syntax errors better
function validateRegexFlags(regexFlags) {
    for (const flag of regexFlags)
        if (!"gimus".includes(flag))
            throw new Error(`--regex-flags must only contain valid regex flags: unexpected ${flag}`);
}
function validateIncludeGrammarFlag(includeGrammar, s) {
    if (!includeGrammar)
        return;
    if (s.includes('*/'))
        throw new Error("--include-grammar-comment must be false when grammar contains the sequence '*/'");
}
yargs.command("$0 <grammar> [output_file]", "Build parser from grammar", _yargs => {
    _yargs.positional('grammar', {
        describe: 'Grammar input file',
        type: 'string',
    }).positional('output_file', {
        describe: 'Output file: If provided write the generated parser to this file, otherwise output to stdout.',
        type: 'string',
    });
    return _yargs.options({
        "num-enums": {
            type: "boolean",
            default: false,
            desc: "Use numeric enums for AST kinds",
        },
        "enable-memo": {
            type: "boolean",
            default: false,
            desc: "Enable memoisation, get better performance for increased memory usage",
        },
        "include-grammar-comment": {
            type: "boolean",
            default: true,
            desc: "Include the input grammar as a comment at the start of the parser file.",
        },
        "regex-flags": {
            type: "string",
            default: "",
            desc: "Additional regex flags to be supplied to regex literals. e.g. " +
                "--regex-flags=u will enable unicode support",
        },
    });
}, argv => {
    const grammarFile = argv.grammar;
    const outputFile = argv.output_file;
    const regexFlags = argv["regex-flags"];
    const includeGrammar = argv["include-grammar-comment"];
    try {
        validateRegexFlags(regexFlags);
        const inGram = fs.readFileSync(grammarFile, { encoding: "utf8" });
        validateIncludeGrammarFlag(includeGrammar, inGram);
        const parser = (0, gen_1.buildParser)(inGram, argv["num-enums"], argv["enable-memo"], regexFlags, includeGrammar);
        if (outputFile !== undefined) {
            fs.writeFileSync(outputFile, parser);
        }
        else {
            process.stdout.write(parser);
        }
    }
    catch (err) {
        process.exitCode = 1;
        if (err instanceof checks_1.CheckError) {
            console.error(err.message);
        }
        else if (err instanceof gen_1.SyntaxErrs) {
            for (const se of err.errs)
                console.log(se.toString());
        }
        else {
            console.error(err);
        }
    }
})
    .strict()
    .scriptName("tspeg")
    .help()
    .parse();
